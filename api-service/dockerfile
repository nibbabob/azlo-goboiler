# =============================================================================
# Dockerfile - Fixed user and security issues
# =============================================================================
# Multi-stage build for optimized production image
FROM golang:1.24-alpine AS builder

# Install build-time dependencies.
RUN apk add --no-cache git ca-certificates tzdata wget

# Set the working directory inside the container.
WORKDIR /app

# Copy the go.mod and go.sum files first for better layer caching.
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# Copy the rest of the application's source code.
COPY . .

# Build the Go application into a statically linked binary.
# Also build a health check binary
RUN CGO_ENABLED=0 GOOS=linux go build \
    -ldflags='-w -s' \
    -o /app/main \
    ./cmd/api/main.go && \
    CGO_ENABLED=0 GOOS=linux go build \
    -ldflags='-w -s' \
    -o /app/healthcheck \
    ./cmd/healthcheck/main.go

# =============================================================================
# STAGE 2: Final Production Image using distroless
# =============================================================================
FROM gcr.io/distroless/static:nonroot

# Set the working directory for the final image.
WORKDIR /app

# Copy the compiled binaries from the builder stage.
# The distroless nonroot image already has the correct user setup
COPY --from=builder --chown=nonroot:nonroot /app/main /app/main
COPY --from=builder --chown=nonroot:nonroot /app/healthcheck /app/healthcheck

# The nonroot user is already set up in the distroless image
# No need to copy passwd/group files

# Expose the port that the application listens on.
EXPOSE 8080

# Define a health check that works with distroless.
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD ["/app/healthcheck"]

# Define the command to run when the container starts.
ENTRYPOINT ["/app/main"]