# Use the non-root user defined in docker-compose.yml
user 101:101; 
worker_processes auto;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # --- BASIC SETTINGS ---
    server_tokens off;
    client_body_timeout 10s;
    client_header_timeout 10s;

    # Define all temp paths to use the mounted tmpfs volume
    client_body_temp_path /tmp/client_body;
    proxy_temp_path       /tmp/proxy;
    fastcgi_temp_path     /tmp/fastcgi;
    uwsgi_temp_path       /tmp/uwsgi;
    scgi_temp_path        /tmp/scgi;
    
    # --- SSL/TLS HARDENING ---
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1h;
    ssl_session_tickets off;

    # --- UPSTREAM DEFINITION ---
    # Define the Go API as an upstream server for cleaner config and more options
    upstream go_api_server {
        # The service name and port from your docker-compose file
        server go-api:8080;
    }

    # --- HTTP to HTTPS REDIRECTION ---
    server {
        listen 80;
        server_name _; # Catch-all
        return 301 https://$host$request_uri;
    }

    # --- MAIN SECURE SERVER ---
    server {
        listen 443 ssl;
        http2 on;
        server_name localhost;

        ssl_certificate /etc/nginx/certs/cert.pem;
        ssl_certificate_key /etc/nginx/certs/key.pem;

        # --- SECURITY HEADERS ---
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer" always;
        # A more specific CSP now that we know the routes
        add_header Content-Security-Policy "default-src 'self'; script-src 'self'; object-src 'none';" always;
        
        # --- PROXY HEADERS ---
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # --- ROUTE-SPECIFIC LOCATIONS ---

        # Location for protected API calls
        location /api/v1/ {
            # Could add specific caching rules here for API data if needed
            # proxy_cache my_api_cache;
            # proxy_cache_valid 200 10m;
            proxy_pass http://go_api_server;
        }

        # Location for public auth endpoint
        location /auth {
            # Don't cache authentication responses
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            proxy_pass http://go_api_server;
        }

        # Location for health checks.
        # This is a lightweight endpoint, good for frequent checks.
        location = /health {
            access_log off; # Turn off logging for frequent health checks
            proxy_pass http://go_api_server;
        }

        # Location for Prometheus metrics.
        # Secured to be accessible only from within the Docker network
        location = /metrics {
            allow 127.0.0.1;
            allow 172.16.0.0/12; # Default Docker network ranges
            deny all;
            proxy_pass http://go_api_server;
        }
    }
}